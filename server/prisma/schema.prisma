datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum BookingStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  name           String
  email          String    @unique
  password       String
  phone          String?
  address        String?
  avatar         String?
  role           UserRole  @default(CUSTOMER)
  bookings       Booking[]
  shop           Shop?     @relation("ShopAdmin")
  shopId         String?   @db.Uuid
  vehicles       Vehicle[] @relation("VehicleAdmin")
  otp            String?
  otpExpiresAt   DateTime?
  otpAttempts    Int       @default(0)
  blacklisted    Boolean   @default(false)
  blacklistUntil DateTime?
  verified       Boolean   @default(false)
}

model Vehicle {
  id                 String    @id @default(uuid()) @db.Uuid
  registrationNumber String    @unique
  bookedStatus       Boolean   @default(false)
  bookings           Booking[]
  model              Model     @relation(fields: [modelId], references: [id])
  modelId            String    @db.Uuid
  admin              User      @relation("VehicleAdmin", fields: [adminId], references: [id])
  adminId            String    @db.Uuid
  Shop               Shop?     @relation(fields: [shopId], references: [id])
  shopId             String?   @db.Uuid
  perHourCharge      Float
  fuelType           FuelType
  vehicleImg         String[]
}

model Brand {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  logo        String?
  description String?
  models      Model[]
}

model Model {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  brand       Brand      @relation(fields: [brandId], references: [id])
  brandId     String     @db.Uuid
  vehicles    Vehicle[]
  fuelTypes   FuelType[]
  description String?
  modelImg    String?
}

model Shop {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  admin       User      @relation("ShopAdmin", fields: [userId], references: [id])
  address     String
  vehicles    Vehicle[]
  bookings    Booking[]
  userId      String    @unique @db.Uuid
}

model Booking {
  id                  String        @id @default(uuid()) @db.Uuid
  bookedFrom          DateTime
  bookedTo            DateTime
  bookingFromAddress  String
  bookingToAddress    String
  bookingFromLocation Int[]
  bookingToLocation   Int[]
  numberOfHours       Int
  totalAmount         Float
  status              BookingStatus @default(PENDING)
  vehicle             Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId           String        @db.Uuid
  user                User          @relation(fields: [userId], references: [id])
  userId              String        @db.Uuid
  cancellationCharges Float?
  cancellationDate    DateTime?
  shop                Shop?         @relation(fields: [shopId], references: [id]) // Relation to Shop
  shopId              String?       @db.Uuid
}
